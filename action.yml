name: "Setup tools"
description: "Setup needed versions of PHP, Node, and Yarn."
inputs:
  php:
    description: "Override the PHP version, or set 'false' to skip setting up PHP."
    required: false
  node:
    description: "Override the Node version, or set 'false' to skip setting up Node and Yarn."
    required: false
  github_token:
    description: "The GitHub PAT that Composer will use to authenticate with private repositories"
    required: false
runs:
  using: composite
  steps:
    - name: "Read tool versions"
      id: versions
      shell: bash
      env:
        INPUT_NODE: ${{ inputs.node }}
        INPUT_PHP: ${{ inputs.php }}
      run: |
        . .github/versions.sh

        printf "\n\e[1mSelected tool versions\e[0m\n"
        echo " PHP: ${INPUT_PHP:-$PHP_VERSION}"
        echo "::set-output name=php-version::${INPUT_PHP:-$PHP_VERSION}"
        echo " Composer: $COMPOSER_VERSION"
        echo "::set-output name=composer-version::$COMPOSER_VERSION"
        echo " Node: ${INPUT_NODE:-$NODE_VERSION}"
        echo "::set-output name=node-version::${INPUT_NODE:-$NODE_VERSION}"

    # Output step heading
    - run: printf "\n\e[1mSetup PHP\e[0m\n"
      shell: bash
      if: steps.versions.outputs.php-version != 'false'

    # Setup the version of PHP passed as an input (or the default in versions.sh)
    - name: Setup PHP
      if: steps.versions.outputs.php-version != 'false'
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ steps.versions.outputs.php-version }}
        tools: composer:${{ steps.versions.outputs.composer-version }}
        extensions: mysql, imagick
        coverage: none
      env:
        COMPOSER_TOKEN: ${{ inputs.github_token }}

    # Notify user we are skipping PHP install if version passed is 'false'
    - run: printf "\n\e[1mSkipping PHP setup\e[0m\n\n"
      shell: bash
      if: steps.versions.outputs.php-version == 'false'

    # Output step heading
    - run: printf "\n\e[1mSetup Node\e[0m\n"
      shell: bash
      if: steps.versions.outputs.node-version != 'false'

    # Setup the version of Node passed as an input (or the default in versions.sh)
    - name: Setup Node
      if: steps.versions.outputs.node-version != 'false'
      uses: actions/setup-node@v2
      with:
        node-version: ${{ steps.versions.outputs.node-version }}
        always-auth: true
        registry-url: https://npm.pkg.github.com
        scope: '@itcig'
      env:
        NODE_AUTH_TOKEN: ${{ inputs.github_token }}

    # Notify user we are skipping Node install if version passed is 'false'
    - run: printf "\n\e[1mSkipping Node setup\e[0m\n\n"
      shell: bash
      if: steps.versions.outputs.node-version == 'false'

    # Output step heading
    - run: printf "\n\e[1mSetup Composer cache\e[0m\n"
      shell: bash
      if: steps.versions.outputs.php-version != 'false'

    - name: Get Composer cache directory
      if: steps.versions.outputs.php-version != 'false'
      id: composer-cache
      shell: bash
      run: |
        echo "::set-output name=dir::$(composer config cache-files-dir)"

    - name: Use composer cache
      if: steps.versions.outputs.php-version != 'false'
      uses: actions/cache@v2
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-

    # Output tool versions after setup is finished
    - name: Tool versions
      shell: bash
      run: |
        function docmd {
          if [[ -z "$(command -v $1)" ]]; then
            echo "$1 is not available"
          else
            which $1
            "$@"
          fi
        }

        printf "\n\e[1mInstalled tool versions\e[0m\n"
        docmd php --version
        docmd composer --version
        docmd node --version
        docmd jq --version
